name: Deploy CI
on:
  push:
    branches:
      - 'main'

jobs:
  Build:
    runs-on: ubuntu-latest
    outputs:
      preview_url: ${{ steps.vercel-action.outputs.preview-url }}
    steps:
      - name: Checkout repo 🛎️
        uses: actions/checkout@v3

      - name: Setting up Node.js 🔧
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies 🧼
        uses: bahmutov/npm-install@v1

      - name: Building Extension🛠
        run: npm run build -- --filter=@bypass/extension

      - name: Uploading extension 🌐
        uses: actions/upload-artifact@v3
        with:
          name: extension-file
          path: ./apps/extension/build/bypass-links-*.zip

      - name: Deploy Preview (Vercel) 🔺
        uses: amondnet/vercel-action@v25
        id: vercel-action
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID}}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID}}
          github-comment: false

  Playwright:
    needs: [Build]
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo 🛎️
        uses: actions/checkout@v3

      - name: Setting up Node.js 🔧
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache Playwright binaries 📑
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: |
            ~/Library/Caches/ms-playwright
            ~/.cache/ms-playwright
            ${{ github.workspace }}/node_modules/playwright
          key: cache-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: cache-playwright-

      - name: Install dependencies 🧼
        uses: bahmutov/npm-install@v1

      - name: Install Playwright browsers 🖥️
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Run Playwright tests 🧪
        run: npx playwright test
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{ needs.Build.outputs.preview_url }}

      - name: Upload Playwright test report 📂
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/

  Create_Release:
    runs-on: ubuntu-latest
    needs: [Cypress]
    steps:
      - name: Checkout repo 🛎️
        uses: actions/checkout@v3

      - name: Download artifacts 🎨
        uses: actions/download-artifact@v3
        with:
          name: extension-file
          path: ./apps/extension/build/

      - name: Generate Release Tag 🏷
        uses: amitsingh-007/next-release-tag@v2.2.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate changelog 🧾
        id: changelog
        uses: metcalfc/changelog-generator@v4.0.1
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release ✒
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.release_tag }}
          release_name: Release ${{ env.release_tag }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Get Release Asset Name 🗃
        id: get_release_asset_name
        run: |
          file=$(find ./apps/extension/build/bypass-links-*.zip  -printf "%f\n")
          echo "::set-output name=asset_name::$file"

      - name: Upload Release Asset ☁
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./apps/extension/build/${{ steps.get_release_asset_name.outputs.asset_name }}
          asset_name: ${{ steps.get_release_asset_name.outputs.asset_name }}
          asset_content_type: application/zip

  Deploy:
    runs-on: ubuntu-latest
    needs: [Create_Release]
    steps:
      - name: Checkout repo 🛎️
        uses: actions/checkout@v3

      - name: Setting up Node.js 🔧
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Start deployment 🚀
        uses: bobheadxi/deployments@v1.3.0
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: Production

      - name: Deploy (Vercel) 🔺
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID}}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID}}
          vercel-args: '--prod'

      - name: Finish deployment 🌙
        uses: bobheadxi/deployments@v1.3.0
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: ${{ steps.vercel-action.outputs.preview-url }}
          env: ${{ steps.deployment.outputs.env }}
